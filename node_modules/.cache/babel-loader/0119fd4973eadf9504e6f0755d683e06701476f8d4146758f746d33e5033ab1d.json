{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rsung\\\\Mind_Bridge1\\\\Mind_Bridge\\\\src\\\\Chat.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst questionOrder = ['이름을 입력해주세요.', '성별을 입력해주세요.', '나이를 입력해주세요.', '현재 상태를 간단히 적어주세요.', '상담받고 싶은 내용을 말씀해주세요.', '이전에 상담 경험이 있었나요?'];\nconst fieldKeys = ['이름', '성별', '나이', '상태', '상담받고싶은내용', '이전상담경험'];\nconst API_KEY = ''; //키값 넣기\n\nconst Chat = () => {\n  _s();\n  const [step, setStep] = useState(0);\n  const [chatInput, setChatInput] = useState('');\n  const [chatHistory, setChatHistory] = useState([{\n    sender: 'ai',\n    message: questionOrder[0]\n  }]);\n  const [form, setForm] = useState({\n    이름: '',\n    성별: '',\n    나이: '',\n    상태: '',\n    상담받고싶은내용: '',\n    이전상담경험: ''\n  });\n  const [isTyping, setIsTyping] = useState(false);\n  const chatEndRef = useRef(null);\n  useEffect(() => {\n    var _chatEndRef$current;\n    (_chatEndRef$current = chatEndRef.current) === null || _chatEndRef$current === void 0 ? void 0 : _chatEndRef$current.scrollIntoView({\n      behavior: 'smooth'\n    });\n  }, [chatHistory, isTyping]);\n  const handleSubmit = async () => {\n    if (!chatInput.trim()) return;\n    const currentKey = fieldKeys[step];\n    const updatedValue = currentKey === '나이' ? parseInt(chatInput, 10) : chatInput;\n    setChatHistory(prev => [...prev, {\n      sender: 'user',\n      message: chatInput\n    }]);\n    setForm(prev => ({\n      ...prev,\n      [currentKey]: updatedValue\n    }));\n    setChatInput('');\n    setIsTyping(true);\n    if (step < fieldKeys.length - 1) {\n      // 다음 질문 출력\n      setTimeout(() => {\n        setChatHistory(prev => [...prev, {\n          sender: 'ai',\n          message: questionOrder[step + 1]\n        }]);\n        setStep(prev => prev + 1);\n        setIsTyping(false);\n      }, 700);\n    } else {\n      // 모든 질문 끝났으면 OpenAI API 호출\n      await sendToOpenAI({\n        ...form,\n        [currentKey]: updatedValue\n      });\n    }\n  };\n  const sendToOpenAI = async finalForm => {\n    setChatHistory(prev => [...prev, {\n      sender: 'ai',\n      message: '상담 내용을 분석 중입니다...'\n    }]);\n    const systemPrompt = `\n당신은 감정 분석과 상담 요약에 특화된 전문 상담사입니다.\n다음 사용자 정보를 바탕으로 대화를 분석하고 상담 응답을 구성하세요:\n\n이름: ${finalForm.이름}\n성별: ${finalForm.성별}\n나이: ${finalForm.나이}\n상태: ${finalForm.상태}\n상담 받고싶은 내용: ${finalForm.상담받고싶은내용}\n이전 상담 경험: ${finalForm.이전상담경험}\n\n다음 사항을 수행하세요:\n1. 사용자의 발화에서 감정을 분석합니다. (예: 불안, 분노, 슬픔, 좌절 등)\n2. 상담사로서 공감적인 첫 응답을 제공합니다.\n3. 지금까지의 대화 내용을 바탕으로 요약을 제공합니다.\n4. 세션이 종료된다고 판단되면 true를, 계속 진행 중이면 false를 반환합니다.\n\n출력 형식은 다음 JSON 형식이어야 합니다:\n{\n  \"감정\": \"<감정 분석 결과>\",\n  \"상담사_응답\": \"<공감적이고 유도적인 문장>\",\n  \"요약\": \"<지금까지의 상담 흐름 요약>\",\n  \"세션_종료\": true 또는 false\n}\n  `;\n    try {\n      const res = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: systemPrompt\n          }, {\n            role: 'user',\n            content: '상담을 시작해 주세요.'\n          }],\n          temperature: 0.7\n        })\n      });\n      const data = await res.json();\n      if (!res.ok) {\n        console.error('OpenAI 응답 오류:', data);\n        setChatHistory(prev => [...prev, {\n          sender: 'ai',\n          message: 'AI 응답 오류 발생'\n        }]);\n        setIsTyping(false);\n        return;\n      }\n      let result;\n      try {\n        result = JSON.parse(data.choices[0].message.content);\n      } catch (e) {\n        result = {\n          감정: '분석 실패',\n          상담사_응답: data.choices[0].message.content,\n          요약: '형식 오류',\n          세션_종료: false\n        };\n      }\n      const botMessages = [result.상담사_응답];\n      if (result.세션_종료) {\n        botMessages.push('상담이 종료되었습니다. 감사합니다.');\n      }\n      setChatHistory(prev => [...prev.filter(msg => msg.message !== '상담 내용을 분석 중입니다...'), ...botMessages.map(m => ({\n        sender: 'ai',\n        message: m\n      }))]);\n    } catch (error) {\n      console.error('에러 발생:', error);\n      setChatHistory(prev => [...prev, {\n        sender: 'ai',\n        message: '서버 오류가 발생했습니다.'\n      }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tab-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"AI \\uC0C1\\uB2F4 \\uCC57\\uBD07\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      style: {\n        maxHeight: 400,\n        overflowY: 'auto'\n      },\n      children: [chatHistory.map((msg, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `bubble ${msg.sender}`,\n        children: msg.message\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)), isTyping && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bubble ai typing\",\n        children: \"AI \\uC751\\uB2F5 \\uC0DD\\uC131 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694...\",\n      className: \"input-full\",\n      value: chatInput,\n      onChange: e => setChatInput(e.target.value),\n      onKeyDown: e => e.key === 'Enter' && handleSubmit(),\n      disabled: isTyping\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"button\",\n      onClick: handleSubmit,\n      disabled: isTyping,\n      children: \"\\uC785\\uB825\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n_s(Chat, \"1l8qdTahmuw4JXtYe/vzFs1qO78=\");\n_c = Chat;\nexport default Chat;\nvar _c;\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"names":["React","useState","useRef","useEffect","jsxDEV","_jsxDEV","questionOrder","fieldKeys","API_KEY","Chat","_s","step","setStep","chatInput","setChatInput","chatHistory","setChatHistory","sender","message","form","setForm","이름","성별","나이","상태","상담받고싶은내용","이전상담경험","isTyping","setIsTyping","chatEndRef","_chatEndRef$current","current","scrollIntoView","behavior","handleSubmit","trim","currentKey","updatedValue","parseInt","prev","length","setTimeout","sendToOpenAI","finalForm","systemPrompt","res","fetch","method","headers","Authorization","body","JSON","stringify","model","messages","role","content","temperature","data","json","ok","console","error","result","parse","choices","e","감정","상담사_응답","요약","세션_종료","botMessages","push","filter","msg","map","m","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","maxHeight","overflowY","i","ref","type","placeholder","value","onChange","target","onKeyDown","key","disabled","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rsung/Mind_Bridge1/Mind_Bridge/src/Chat.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\n\n\nconst questionOrder = [\n  '이름을 입력해주세요.',\n  '성별을 입력해주세요.',\n  '나이를 입력해주세요.',\n  '현재 상태를 간단히 적어주세요.',\n  '상담받고 싶은 내용을 말씀해주세요.',\n  '이전에 상담 경험이 있었나요?'\n];\n\nconst fieldKeys = [\n  '이름', '성별', '나이', '상태', '상담받고싶은내용', '이전상담경험'\n];\n\nconst API_KEY = ''; //키값 넣기\n\nconst Chat = () => {\n  const [step, setStep] = useState(0);\n  const [chatInput, setChatInput] = useState('');\n  const [chatHistory, setChatHistory] = useState([{ sender: 'ai', message: questionOrder[0] }]);\n  const [form, setForm] = useState({\n    이름: '', 성별: '', 나이: '', 상태: '', 상담받고싶은내용: '', 이전상담경험: ''\n  });\n  const [isTyping, setIsTyping] = useState(false);\n  const chatEndRef = useRef(null);\n\n  useEffect(() => {\n    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, [chatHistory, isTyping]);\n\n  const handleSubmit = async () => {\n    if (!chatInput.trim()) return;\n\n    const currentKey = fieldKeys[step];\n    const updatedValue = currentKey === '나이' ? parseInt(chatInput, 10) : chatInput;\n\n    setChatHistory(prev => [...prev, { sender: 'user', message: chatInput }]);\n    setForm(prev => ({ ...prev, [currentKey]: updatedValue }));\n    setChatInput('');\n    setIsTyping(true);\n\n    if (step < fieldKeys.length - 1) {\n      // 다음 질문 출력\n      setTimeout(() => {\n        setChatHistory(prev => [...prev, { sender: 'ai', message: questionOrder[step + 1] }]);\n        setStep(prev => prev + 1);\n        setIsTyping(false);\n      }, 700);\n    } else {\n      // 모든 질문 끝났으면 OpenAI API 호출\n      await sendToOpenAI({ ...form, [currentKey]: updatedValue });\n    }\n  };\n\n  const sendToOpenAI = async (finalForm) => {\n    setChatHistory(prev => [...prev, { sender: 'ai', message: '상담 내용을 분석 중입니다...' }]);\n\n    const systemPrompt = `\n당신은 감정 분석과 상담 요약에 특화된 전문 상담사입니다.\n다음 사용자 정보를 바탕으로 대화를 분석하고 상담 응답을 구성하세요:\n\n이름: ${finalForm.이름}\n성별: ${finalForm.성별}\n나이: ${finalForm.나이}\n상태: ${finalForm.상태}\n상담 받고싶은 내용: ${finalForm.상담받고싶은내용}\n이전 상담 경험: ${finalForm.이전상담경험}\n\n다음 사항을 수행하세요:\n1. 사용자의 발화에서 감정을 분석합니다. (예: 불안, 분노, 슬픔, 좌절 등)\n2. 상담사로서 공감적인 첫 응답을 제공합니다.\n3. 지금까지의 대화 내용을 바탕으로 요약을 제공합니다.\n4. 세션이 종료된다고 판단되면 true를, 계속 진행 중이면 false를 반환합니다.\n\n출력 형식은 다음 JSON 형식이어야 합니다:\n{\n  \"감정\": \"<감정 분석 결과>\",\n  \"상담사_응답\": \"<공감적이고 유도적인 문장>\",\n  \"요약\": \"<지금까지의 상담 흐름 요약>\",\n  \"세션_종료\": true 또는 false\n}\n  `  ;\n\n    try {\n      const res = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${API_KEY}`\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [\n            { role: 'system', content: systemPrompt },\n            { role: 'user', content: '상담을 시작해 주세요.' }\n          ],\n          temperature: 0.7\n        })\n      });\n\n      const data = await res.json();\n\n      if (!res.ok) {\n        console.error('OpenAI 응답 오류:', data);\n        setChatHistory(prev => [...prev, { sender: 'ai', message: 'AI 응답 오류 발생' }]);\n        setIsTyping(false);\n        return;\n      }\n\n      let result;\n      try {\n        result = JSON.parse(data.choices[0].message.content);\n      } catch (e) {\n        result = {\n          감정: '분석 실패',\n          상담사_응답: data.choices[0].message.content,\n          요약: '형식 오류',\n          세션_종료: false\n        };\n      }\n\n      const botMessages = [\n        result.상담사_응답\n      ];\n\n      if (result.세션_종료) {\n        botMessages.push('상담이 종료되었습니다. 감사합니다.');\n      }\n\n      setChatHistory(prev => [\n        ...prev.filter(msg => msg.message !== '상담 내용을 분석 중입니다...'),\n        ...botMessages.map(m => ({ sender: 'ai', message: m }))\n      ]);\n    } catch (error) {\n      console.error('에러 발생:', error);\n      setChatHistory(prev => [...prev, { sender: 'ai', message: '서버 오류가 발생했습니다.' }]);\n    } finally {\n      setIsTyping(false);\n    }\n  };\n\n  return (\n    <div className=\"tab-content\">\n      <h3>AI 상담 챗봇</h3>\n      <div className=\"chat-box\" style={{ maxHeight: 400, overflowY: 'auto' }}>\n        {chatHistory.map((msg, i) => (\n          <div key={i} className={`bubble ${msg.sender}`}>\n            {msg.message}\n          </div>\n        ))}\n        {isTyping && <div className=\"bubble ai typing\">AI 응답 생성 중...</div>}\n        <div ref={chatEndRef} />\n      </div>\n\n      <input\n        type=\"text\"\n        placeholder=\"메시지를 입력하세요...\"\n        className=\"input-full\"\n        value={chatInput}\n        onChange={(e) => setChatInput(e.target.value)}\n        onKeyDown={(e) => e.key === 'Enter' && handleSubmit()}\n        disabled={isTyping}\n      />\n      <button className=\"button\" onClick={handleSubmit} disabled={isTyping}>\n        입력\n      </button>\n    </div>\n\n  );\n};\n\nexport default Chat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}