{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rsung\\\\mm\\\\Mind_Bridge\\\\src\\\\Picture.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst promptTemplate = `\n쿄애니(京都アニメーション, Kyoto Animation) 스타일의 귀여운 $Picture 일러스트입니다.  \n    1. 그림은 $Picture 에서 요구하는 사항을 우선시 하며 가장 중요한 것은 감정이 보여야 한다.\n    2. 요구하는 사항은 상담 결과를 제공하며 상황에 맞게 그림을 그려줘야 한다.\n    3. 상담받는 사람이 볼 수 있기에 그림체는 강압적이지 않게 보여야 한다.\n`;\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // OpenAI API 호출 함수\n  const generateImage = async () => {\n    setLoading(true);\n    setError('');\n    setImageUrl('');\n    try {\n      const finalPrompt = promptTemplate.replace(/\\$Picture/g, userInput.trim() || 'dog');\n\n      // OpenAI API 직접 호출\n      const res = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ` // Bearer 옆에 키값 넣기\n        },\n        body: JSON.stringify({\n          model: 'dall-e-3',\n          prompt: finalPrompt,\n          n: 1,\n          size: '1024x1024',\n          quality: 'standard'\n        })\n      });\n      if (!res.ok) {\n        const errData = await res.json();\n        throw new Error(errData.error.message || 'API 요청 실패');\n      }\n      const data = await res.json();\n      setImageUrl(data.data[0].url);\n    } catch (err) {\n      setError(err.message);\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 600,\n      margin: 'auto',\n      padding: 20,\n      fontFamily: 'sans-serif'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC774\\uBBF8\\uC9C0 \\uC0DD\\uC131\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"\\uADF8\\uB9B4 \\uB300\\uC0C1\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",\n      value: userInput,\n      onChange: e => setUserInput(e.target.value),\n      style: {\n        width: '100%',\n        padding: 8,\n        fontSize: 16\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateImage,\n      disabled: loading || !userInput.trim(),\n      style: {\n        marginTop: 10,\n        padding: '10px 20px',\n        fontSize: 16\n      },\n      children: loading ? '생성중...' : '이미지 생성'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: [\"\\uC624\\uB958: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this), imageUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: imageUrl,\n        alt: \"\\uC0DD\\uC131\\uB41C \\uC774\\uBBF8\\uC9C0\",\n        style: {\n          width: '100%',\n          borderRadius: 8\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"X0Hi6OpzQIRO3PZfcfxG05sB4O8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","promptTemplate","App","_s","userInput","setUserInput","imageUrl","setImageUrl","loading","setLoading","error","setError","generateImage","finalPrompt","replace","trim","res","fetch","method","headers","body","JSON","stringify","model","prompt","n","size","quality","ok","errData","json","Error","message","data","url","err","style","maxWidth","margin","padding","fontFamily","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","width","fontSize","onClick","disabled","marginTop","color","src","alt","borderRadius","_c","$RefreshReg$"],"sources":["C:/Users/rsung/mm/Mind_Bridge/src/Picture.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst promptTemplate = `\n쿄애니(京都アニメーション, Kyoto Animation) 스타일의 귀여운 $Picture 일러스트입니다.  \n    1. 그림은 $Picture 에서 요구하는 사항을 우선시 하며 가장 중요한 것은 감정이 보여야 한다.\n    2. 요구하는 사항은 상담 결과를 제공하며 상황에 맞게 그림을 그려줘야 한다.\n    3. 상담받는 사람이 볼 수 있기에 그림체는 강압적이지 않게 보여야 한다.\n`;\n\nfunction App() {\n  const [userInput, setUserInput] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // OpenAI API 호출 함수\n  const generateImage = async () => {\n    setLoading(true);\n    setError('');\n    setImageUrl('');\n    try {\n      const finalPrompt = promptTemplate.replace(/\\$Picture/g, userInput.trim() || 'dog');\n\n      // OpenAI API 직접 호출\n      const res = await fetch('https://api.openai.com/v1/images/generations', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer `, // Bearer 옆에 키값 넣기\n        },\n        body: JSON.stringify({\n          model: 'dall-e-3',\n          prompt: finalPrompt,\n          n: 1,\n          size: '1024x1024',\n          quality: 'standard',\n        }),\n      });\n\n      if (!res.ok) {\n        const errData = await res.json();\n        throw new Error(errData.error.message || 'API 요청 실패');\n      }\n\n      const data = await res.json();\n      setImageUrl(data.data[0].url);\n    } catch (err) {\n      setError(err.message);\n    }\n    setLoading(false);\n  };\n\n  return (\n    <div style={{ maxWidth: 600, margin: 'auto', padding: 20, fontFamily: 'sans-serif' }}>\n      <h1>이미지 생성기</h1>\n      <input\n        type=\"text\"\n        placeholder=\"그릴 대상을 입력하세요\"\n        value={userInput}\n        onChange={(e) => setUserInput(e.target.value)}\n        style={{ width: '100%', padding: 8, fontSize: 16 }}\n      />\n      <button\n        onClick={generateImage}\n        disabled={loading || !userInput.trim()}\n        style={{ marginTop: 10, padding: '10px 20px', fontSize: 16 }}\n      >\n        {loading ? '생성중...' : '이미지 생성'}\n      </button>\n\n      {error && <p style={{ color: 'red' }}>오류: {error}</p>}\n\n      {imageUrl && (\n        <div style={{ marginTop: 20 }}>\n          <img src={imageUrl} alt=\"생성된 이미지\" style={{ width: '100%', borderRadius: 8 }} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}